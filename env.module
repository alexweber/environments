<?php
/**
 * @file
 * Env module.
 */

/**
 * Implements hook_permission().
 */
function env_permission() {
  return array(
    'administer env' => array(
      'title' => t('Administer Env'),
    ),
    'view env notifications' => array(
      'title' => t('View environments notifications'),
      'description' => t('View a configurable notification about what the current site environment is.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function env_menu() {
  $items = array();

  $items['admin/config/system/env'] = array(
    'title' => 'Site environment',
    'description' => 'View and change the current site environment.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('env_form_site_environment'),
    'access arguments' => array('administer env'),
    'file' => 'env.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function env_help($path, $arg) {
  switch ($path) {
    case 'admin/help#env':
      return t('Env is a module for dealing with various server environments. @TODO write more');
    case 'admin/config/system/env':
      return t('Here you can view and change the current environment. To manage defined environments, go <a href="!url">here</a>.', array('!url' => url('admin/config/development/env', array('absolute' => TRUE))));
    case 'admin/config/development/env':
      return t('Here you can manage your environments. To change the current environment, go <a href="!url">here</a>.', array('!url' => url('admin/config/system/env', array('absolute' => TRUE))));
  }
}

/**
 * Set an environment.
 *
 * @param string
 *   An environment machine name.
 */
function env_set($env) {
  if ($environment = env_environment_load($env)) {
    $operations = array();

    // Add tasks in order. We use a router function to allow operations to
    // live in more than one include.
    foreach (element_children($environment->tasks, TRUE) as $task) {
      $task_info = $environment->tasks[$task];
      $operations[] = array('_env_task_router', array($task_info));
    }

    // Always run our cleanup operation last to set the context for status
    // messages and clean caches.
    $operations[] = array('_env_task_cleanup', array(t('Cleaning up.'), $env));

    // Setup batch.
    $batch = array(
      'title' => t('Setting up environment.'),
      'operations' => $operations,
      'finished' => '_env_task_finished',
      'init_message' => t('Preparing to set environment.'),
      'progress_message' => t('Processed @current out of @total tasks.'),
      'error_message' => t('Error setting environent.'),
      'file' => drupal_get_path('module', 'env') . '/env.batch.inc',
    );

    batch_set($batch);

    // If running through CLI, process batch using Drush.
    if (php_sapi_name() === 'cli') {
      $batch =& batch_get();
      $batch['progressive'] = FALSE;
      drush_backend_batch_process();
    }
    else {
      batch_process('admin/config/system/env');
    }
  }
  else {
    drupal_set_message(t('Trying to set invalid envuronment: @name', array('@name' => $env)), 'error', FALSE);
    watchdog('env', 'Trying to set invalid envuronment: @name', array('@name' => $env), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_page_build().
 */
function env_page_build(&$page) {
  if ($env = variable_get('env')) {
    if ($environment = env_environment_load($env)) {
      // Check if we want to notify in this environment.
      if ($environment->settings['notify']) {
        // Check whether user has access to view notifications. This is done so
        // late because it's the most expensive check we do, so we try to avoid
        // it whenver possible.
        if (user_access('view env notifications')) {
          $path = drupal_get_path('module', 'env');

          $page['page_top']['env'] = array(
            '#theme' => 'env_banner',
            '#env' => $env,
          );

          // Include default styles.
          if (variable_get('env_css', TRUE)) {
            $page['page_top']['env']['#attached']['css'][] = $path . '/css/env.css';
          }

          // Include default scripts.
          if (variable_get('env_js', TRUE)) {
            $page['page_top']['env']['#attached']['js'][] = $path . '/js/env.js';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function env_theme($existing, $type, $theme, $path) {
  return array(
    'env_banner' => array(
      'template' => 'templates/banner',
      'file' => 'env.theme.inc',
      'variables' => array(
        'env' => '',
      ),
    ),
    'env_form_tasks' => array(
      'render element' => 'form',
      'file' => 'env.theme.inc',
    )
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function env_ctools_plugin_directory($module, $type) {
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
  else if ($type === 'env_task') {
    return 'plugins/env_task';
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function env_ctools_plugin_type() {
  $plugins['env_task'] = array(
//    'cache' => TRUE,
    'defaults' => array(
      // Administrative title.
      'admin_title' => '',
      // Callback to execute.
      'task_callback' => '',
      // An array of task-specific settings.
      'settings' => array(),
      // Settings form callback.
      'settings_callback' => '',
    ),
//    'process' => '',
    'use hooks' => FALSE,
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function env_ctools_plugin_api($module, $api) {
  if ($module === 'env') {
    if ($api === 'env_environment') {
      return array('version' => 1);
    }
    else if ($api === 'env_task') {
      return array('version' => 1);
    }
  }
}

/**
 * Fetch data on a single environment task.
 *
 * @param string $task
 *   Name of a task.
 *
 * @return array
 */
function env_get_task($task) {
  ctools_include('plugins');
  return ctools_get_plugins('env', 'env_task', $task);
}

/**
 * Fetch data on all environment tasks.
 *
 * @return array
 */
function env_get_tasks() {
  ctools_include('plugins');
  return ctools_get_plugins('env', 'env_task');
}

/**
 * Create a new environment object
 *
 * Note that this function does not save the environment to the database.
 * @see env_environment_save()
 */
function env_environment_create($values = array()) {
  ctools_include('export');
  $environment = ctools_export_crud_new('env_environment');

  // Default name.
  if (isset($values['name'])) {
    $environment->name = $values['name'];
  }

  // Default title.
  if (isset($values['admin_title'])) {
    $environment->admin_title = $values['admin_title'];
  }

  // Default alias.
  if (isset($values['alias'])) {
    $environment->alias = $values['alias'];
  }

  // Default settings.
  $environment->settings = array(
    'notify' => TRUE,
    'notify_method' => 'banner',
  );

  if (isset($values['setings']) and is_array($values['settings'])) {
    $environment->settings = array_merge($environment->settings, $values['settings']);
  }

  // Default tasks.
  $environment->tasks = array();

  if (isset($values['tasks']) and is_array($values['tasks'])) {
    $environment->tasks = array_merge($values['tasks'], $environment->tasks);
  }

  return $environment;
}

/**
 * Fetches all environments from the database and returns them as an associative
 * array.
 */
function env_environment_load_all() {
  ctools_include('export');
  return ctools_export_crud_load_all('env_environment');
}

/**
 * Load a given environment,
 *
 * @param string
 *   The environment's name.
 *
 * @return stdClass|NULL
 *   The fully-loaded environment object or NULL if it couldn't be loaded.
 */
function env_environment_load($environment_name) {
  ctools_include('export');
  return ctools_export_crud_load('env_environment', $environment_name);
}

/**
 * Checks whether an environment with the given name already exists.
 *
 * @param string
 *   The environment's name.
 * @return boolean
 *   TRUE if there exists an environment with the give name, FALSE otherwise.
 */
function env_environment_exists($environment_name) {
  ctools_include('export');
  $environment = ctools_export_crud_load('env_environment', $environment_name);
  return isset($environment->name);
}

/**
 * Saves the given environment to the database.
 *
 * @param object
 *   The environment to save.
 *
 * @return object|boolean
 *   Failure to write a record will return FALSE. Otherwise SAVED_NEW or
 *   SAVED_UPDATED is returned depending on the operation performed. The
 *   $object parameter contains values for any serial fields defined.
 */
function env_environment_save(&$environment) {
  ctools_include('export');
  return ctools_export_crud_save('env_environment', $environment);
}

/**
 * Deletes the given environment from the database.
 *
 * @param object
 *   The environment object to delete.
 */
function env_environment_delete($environment) {
  ctools_include('export');
  return ctools_export_crud_delete('env_environment', $environment);
}

/**
 * Returns all available Drupal modules. Used by the "module_enable" and
 * "module_disable" tasks. This is as a lightweight replacement for using
 * Drupal core APIs.
 *
 * @return array
 *   An array of module names, keyed by machine_name.
 */
function _env_get_modules() {
  static $modules = array();

  if (empty($modules)) {
    // No value added by using DBTNG.
    $result = db_query("SELECT name, info FROM {system} ORDER BY name ASC");
    foreach ($result->fetchAll() as $row) {
      $info = unserialize($row->info);

      if (!isset($info['hidden']) || !$info['hidden']) {
        $modules[$row->name] = $info['name'];
      }
    }
  }

  return $modules;
}

/**
 * Returns all defined Drupal variables. Used by the "variable_set" and
 * "variable_del" tasks. This is as a lightweight replacement for using Drupal
 * core APIs.
 *
 * @return array
 *   An array of variable names.
 */
function _env_get_variables() {
  static $variables = array();

  if (empty($variables)) {
    // No value added by using DBTNG.
    $result = db_query("SELECT name FROM {variable} ORDER BY name ASC");
    $result = $result->fetchAllAssoc('name');
    $variables = array_keys($result);
  }

  return $variables;
}

/**
 * Returns all available Drupal features. Used by the "features_revert". This
 * is as a convenience function to prepare a list of features for a "select"
 * Form API element.
 *
 * @return array
 *   An array of module names, keyed by machine_name.
 */
function _env_get_features() {
  static $features_options = array();

  if (empty($features)) {
    $features = features_get_features();

    foreach ($features as $name => $info) {
      $features_options[$name] = $info->info['name'];
    }
  }

  return $features_options;
}
