<?php

/**
 * @file
 * Environments module.
 */

/**
 * Implements hook_permission().
 */
function env_permission() {
  return array(
    'administer env' => array(
      'title' => t('Administer Env'),
      'description' => t('Administer the Environments module'),
			'restrict access' => TRUE,
    ),
    'view env notifications' => array(
      'title' => t('View Env notifications'),
      'description' => t('View notifications about what the current environment is.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function env_menu() {
  $items = array();

  $items['admin/config/system/env'] = array(
    'title' => 'Site environment',
    'description' => 'Manage the current site environment.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('env_form_site_environment'),
    'access arguments' => array('administer env'),
    'file' => 'env.admin.inc',
  );

  $items['admin/config/system/env/confirm/%'] = array(
    'title' => 'Confirm site environment change',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('env_form_site_environment_confirm', 5),
    'access arguments' => array('administer env'),
    'file' => 'env.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function env_help($path, $arg) {
  switch ($path) {
    case 'admin/help#env':
			$path = drupal_get_path('module', 'env');
			return file_get_contents("{$path}/README.txt");
    case 'admin/config/system/env':
      return t('Here you can view and change the current environment, as well as manage other settings. To manage defined environments, go <a href="!url">here</a>.', array('!url' => url('admin/config/development/env', array('absolute' => TRUE))));
    case 'admin/config/development/env':
      return t('Here you can manage your environments and tasks. To change the current environment or manage other settings, go <a href="!url">here</a>.', array('!url' => url('admin/config/system/env', array('absolute' => TRUE))));
		case 'admin/config/development/env/list/%/tasks':
			return t('Here you can add to and manage all of an environment\'s tasks. NOTE: The order in which tasks appear is the exact order in which they will run. Use the handles on the left of each task to drag it around and re-order it and press the "Update Order" button when you\'re done to save the changes.');
  }
}

/**
 * Set the current environment.
 *
 * @param string
 *   An environment machine_name.
 */
function env_set($env) {
  if ($environment = env_environment_load($env)) {
    $operations = array();

    // Add tasks in order. We use a dispatcher function to allow operation
    // callbacks to live anywhere and not have to worry about specifying the
		// file right now.
    foreach (element_children($environment->tasks, TRUE) as $task) {
      $task_info = $environment->tasks[$task];
      $operations[] = array('_env_task_dispatcher', array($task_info));
    }

    // Always run our cleanup operation last to set the context for status
    // messages and clean caches.
    $operations[] = array('_env_task_cleanup', array(t('Cleaning up.'), $env));

    // Setup batch.
    $batch = array(
      'title' => t('Setting up environment.'),
      'operations' => $operations,
      'finished' => '_env_task_finished',
      'init_message' => t('Preparing to set environment.'),
      'progress_message' => t('Processed @current out of @total tasks.'),
      'error_message' => t('Error setting environent.'),
      'file' => drupal_get_path('module', 'env') . '/env.batch.inc',
    );

    batch_set($batch);

    // If running through CLI, process batch using Drush.
    if (php_sapi_name() === 'cli' && function_exists('drush_backend_batch_process')) {
      $batch =& batch_get();
      $batch['progressive'] = FALSE;
			drush_backend_batch_process();
    }
    else {
      batch_process('admin/config/system/env');
    }
  }
  else {
    drupal_set_message(t('Trying to set invalid environment: %name', array('%name' => $env)), 'error', FALSE);
    watchdog('env', 'Trying to set invalid environment: %name', array('%name' => $env), WATCHDOG_ERROR);
  }
}

/**
 * Unset the current environment.
 */
function env_unset() {
	variable_set('env', '');
	watchdog('env', 'Environment unset.', array(), WATCHDOG_INFO);
}

/**
 * Implements hook_page_build().
 */
function env_page_build(&$page) {
  if ($env = variable_get('env')) {
    if ($environment = env_environment_load($env)) {
      // Check if we want to notify in this environment.
      if ($environment->settings['notify']) {
        // Check whether user has access to view notifications. This is done so
        // late because it's the most expensive check we do, so we try to avoid
        // it whenver possible.
        if (user_access('view env notifications')) {
          $path = drupal_get_path('module', 'env');

          $page['page_top']['env'] = array(
            '#theme' => 'env_banner',
            '#env' => $env,
          );

          // Include default styles.
          if (variable_get('env_css', TRUE)) {
            $page['page_top']['env']['#attached']['css'][] = $path . '/css/env.css';
          }

          // Include default scripts.
          if (variable_get('env_js', TRUE)) {
            $page['page_top']['env']['#attached']['js'][] = $path . '/js/env.js';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function env_theme() {
  return array(
    'env_banner' => array(
      'template' => 'templates/banner',
      'file' => 'env.theme.inc',
      'variables' => array(
        'env' => '',
      ),
    ),
    'env_form_tasks' => array(
      'render element' => 'form',
      'file' => 'env.theme.inc',
    )
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function env_ctools_plugin_directory($module, $type) {
	if ($type == 'export_ui') {
		return 'plugins/export_ui';
	}
	else {
		if ($type === 'env_task') {
			return 'plugins/env_task';
		}
	}
}

/**
 * Implements hook_ctools_plugin_type().
 */
function env_ctools_plugin_type() {
	$plugins['env_task'] = array(
		'cache' => TRUE,
		'defaults' => array(
			// Administrative title.
			'admin_title' => '',
			// Callback to execute.
			'task_callback' => '',
			// An array of task-specific settings.
			'settings' => array(),
			// Settings form callback.
			'settings_callback' => '',
		),
		'use hooks' => FALSE,
	);

	return $plugins;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function env_ctools_plugin_api($module, $api) {
	if ($module === 'env') {
		if ($api === 'env_environment') {
			return array('version' => 1);
		}
		else {
			if ($api === 'env_task') {
				return array('version' => 1);
			}
		}
	}
}

/**
 * Fetch data on a single environment task.
 *
 * @param string $task
 *   Name of a task.
 *
 * @return array
 */
function env_get_task($task) {
	ctools_include('plugins');
	return ctools_get_plugins('env', 'env_task', $task);
}

/**
 * Fetch data on all environment tasks.
 *
 * @return array
 */
function env_get_tasks() {
	ctools_include('plugins');
	return ctools_get_plugins('env', 'env_task');
}

/**
 * Create a new environment object
 *
 * Note that this function does not save the environment to the database.
 * @see env_environment_save()
 */
function env_environment_create($values = array()) {
	ctools_include('export');
	$environment = ctools_export_crud_new('env_environment');

	// Default name.
	if (isset($values['name'])) {
		$environment->name = $values['name'];
	}

	// Default title.
	if (isset($values['admin_title'])) {
		$environment->admin_title = $values['admin_title'];
	}

	// Default alias.
	if (isset($values['alias'])) {
		$environment->alias = $values['alias'];
	}

	// Default settings.
	$environment->settings = array(
		'notify' => TRUE,
	);

	if (isset($values['setings']) and is_array($values['settings'])) {
		$environment->settings = array_merge($environment->settings, $values['settings']);
	}

	// Default tasks.
	$environment->tasks = array();

	if (isset($values['tasks']) and is_array($values['tasks'])) {
		$environment->tasks = array_merge($values['tasks'], $environment->tasks);
	}

	return $environment;
}

/**
 * Fetches all environments from the database and returns them as an associative
 * array.
 */
function env_environment_load_all() {
	ctools_include('export');
	return ctools_export_crud_load_all('env_environment');
}

/**
 * Load a given environment,
 *
 * @param string
 *   The environment's name.
 *
 * @return stdClass|NULL
 *   The fully-loaded environment object or NULL if it couldn't be loaded.
 */
function env_environment_load($environment_name) {
	ctools_include('export');
	return ctools_export_crud_load('env_environment', $environment_name);
}

/**
 * Checks whether an environment with the given name already exists.
 *
 * @param string
 *   The environment's name.
 * @return boolean
 *   TRUE if there exists an environment with the give name, FALSE otherwise.
 */
function env_environment_exists($environment_name) {
	ctools_include('export');
	$environment = ctools_export_crud_load('env_environment', $environment_name);
	return isset($environment->name);
}

/**
 * Saves the given environment to the database.
 *
 * @param object
 *   The environment to save.
 *
 * @return object|boolean
 *   Failure to write a record will return FALSE. Otherwise SAVED_NEW or
 *   SAVED_UPDATED is returned depending on the operation performed. The
 *   $object parameter contains values for any serial fields defined.
 */
function env_environment_save(&$environment) {
	ctools_include('export');
	return ctools_export_crud_save('env_environment', $environment);
}

/**
 * Deletes the given environment from the database.
 *
 * @param object
 *   The environment object to delete.
 */
function env_environment_delete($environment) {
	ctools_include('export');
	return ctools_export_crud_delete('env_environment', $environment);
}

/**
 * Element validation callback; type-casts the submitted value.
 *
 * @see env_task_variable_set_settings()
 */
function _env_task_variable_set_validate_value($element, &$form_state, $form) {
	$value_type = $form_state['values']['settings']['value_type'];
	$original_value = $value = $form_state['values']['settings']['value'];

	switch ($value_type) {
		case 'boolean':
			$value = (bool) $value;
			break;
		case 'integer':
			$value = (int) $value;
			break;
		case 'float':
			$value = (float) $value;
			break;
	}

	// Update value if we casted it.
	if ($original_value !== $value) {
		form_set_value($element, $value, $form_state);
	}

	// Remove helper setting.
	unset($form_state['values']['value_type']);
}
