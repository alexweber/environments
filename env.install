<?php
/**
 * @file
 * Installation hooks for Env.
 */

/**
 * Implements hook_uninstall().
 */
function env_uninstall() {
  // Delete our variables.
  variable_del('env');
  variable_del('env_css');
  variable_del('env_js');
}

/**
 * Implements hook_schema().
 */
function env_schema() {
  $schema = array();

  $schema['env_environment'] = array(
    'description' => 'Store configuration sets for Env.',
    'export' => array(
      'key' => 'name',
      'identifier' => 'environment',
      'default hook' => 'env_default_environments',
      'api' => array(
        'owner' => 'env',
        'api' => 'env_environment',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'name' => array(
        'description' => 'The machine-readable environment name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'admin_title' => array(
        'description' => 'The human-readable title for this environment.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'alias' => array(
        'description' => 'An alias for this environment, to use with Drush.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'settings' => array(
        'description' => 'Extra settings for environment.',
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'tasks' => array(
        'description' => 'The tasks array.',
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('name'),
    'unique keys' => array(
      'alias' => array('alias'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function env_requirements($phase) {
  $return = array();

  if ($phase === 'runtime') {
    if ($env = variable_get('env')) {
      if ($environment = env_environment_load($env)) {
        $return['env'] = array(
          'title' => t('Env: current environment'),
          'value' => $environment->admin_title,
          'severity' => REQUIREMENT_INFO,
        );
      }
      else {
        $return['env'] = array(
          'title' => t('Env: invalid environment'),
          'value' => $env,
          'severity' => REQUIREMENT_ERROR,
        );
      }
    }
    else {
      $return['env'] = array(
        'title' => t('Env: current environment'),
        'value' => t('No environment set'),
        'severity' => REQUIREMENT_WARNING,
      );
    }
  }

  return $return;
}
