<?php

/**
 * @file
 * Installation hooks.
 */

/**
 * Implements hook_uninstall().
 */
function environments_uninstall() {
  // Remove all of our variables.
  $result = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', 'environments_%', 'LIKE')
    ->execute();

  foreach ($result as $row) {
    variable_del($row->name);
  }
}

/**
 * Implements hook_enable().
 */
function environments_enable() {
  // Display a message and link to the configuration page if we're doing this
  // through the UI.
  if (php_sapi_name() !== 'cli') {
    drupal_set_message(t('You\'ve enabled the Environments module. Click <a href="!url">here</a> to configure up your site environments and tasks.', array('!url' => url('admin/config/development/environments', array('absolute' => TRUE)))), 'status', FALSE);
  }

  // If we don't happen to already have this variable set, try to figure it out
  // from other modules which also use Drush.
  if (!variable_get('environments_drush', FALSE)) {
    _environments_drush_setup();
  }
}

/**
 * Implements hook_schema().
 */
function environments_schema() {
  $schema = array();

  $schema['environments'] = array(
    'description' => 'Site Environments.',
    'export' => array(
      'key' => 'name',
      'identifier' => 'environment',
      'default hook' => 'default_environments_environments',
      'api' => array(
        'owner' => 'environments',
        'api' => 'default_environments_environments',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'name' => array(
        'description' => 'The environment\'s machine-readable name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'admin_title' => array(
        'description' => 'The environment\'s human-readable title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'alias' => array(
        'description' => 'The environment\'s alias, to use with Drush.',
        'type' => 'char',
        // This isn't available here so hard-code it.
        // 'length' => ENVIRONMENTS_ALIAS_MAXLENGTH,
        'length' => 12,
        'not null' => FALSE,
      ),
      'settings' => array(
        'description' => 'The environment\'s extra settings.',
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'tasks' => array(
        'description' => 'The environment\'s tasks.',
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('name'),
    'index' => array(
      'alias' => array('alias'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function environments_requirements($phase) {
  $return = array();
  $t = get_t();

  if ($phase === 'runtime') {
    if ($env = variable_get('environments_env')) {
      if ($environment = environments_load($env)) {
        $return['environments'] = array(
          'title' => $t('Environments: Current environment'),
          'value' => $environment->admin_title,
          'severity' => REQUIREMENT_INFO,
        );
      }
      else {
        $return['environments'] = array(
          'title' => $t('Environments: Invalid environment'),
          'value' => $env,
          'severity' => REQUIREMENT_ERROR,
        );
      }
    }
    else {
      $return['environments'] = array(
        'title' => $t('Environments: Current environment'),
        'value' => $t('No environment set'),
        'severity' => REQUIREMENT_WARNING,
      );
    }
  }

  return $return;
}

/**
 * Helper function to setup path to Drush.
 */
function _environments_drush_setup() {
  // Start with a sensible default.
  $path = '/usr/local/bin/drush';

  // Migrate module has this setting.
  if ($migrate_drush = variable_get('migrate_drush_path')) {
    if (file_exists($migrate_drush)) {
      $path = $migrate_drush;
    }
  }
  // So does Wordpress Migrate.
  elseif ($wp_migrate_drush = variable_get('wordpress_migrate_drush')) {
    if (file_exists($wp_migrate_drush)) {
      $path = $wp_migrate_drush;
    }
  }

  variable_set('environments_drush', $path);
}

/**
 * Fix Environments schema indices.
 */
function environments_update_7100() {
  // If either of these fail, our schema is probably already ok so don't let
  // the update hook fail. Do, however, run them independently to give them both
  // a chance.
  try {
    db_drop_unique_key('environments', 'alias');
  }
  catch (Exception $e) {
    watchdog('environments', $e->getMessage(), array(), WATCHDOG_NOTICE);
  }

  try {
    db_add_index('environments', 'alias', array('alias'));
  }
  catch (Exception $e) {
    watchdog('environments', $e->getMessage(), array(), WATCHDOG_NOTICE);
  }
}

/**
 * Fix Environment aliases.
 */
function environments_update_7101() {
  try {
    db_update('environments')
      ->fields(array('alias' => NULL))
      ->condition('alias', '', '=')
      ->execute();
  }
  catch (Exception $e) {
    watchdog('environments', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
}

/**
 * Fix Environments Drush path.
 */
function environments_update_7102() {
  // Older code didn't check whether the migrate drush path was valid so we
  // borrowed broken config in some cases.
  $path = variable_get('environments_drush', FALSE);

  if (!$path || !file_exists($path)) {
    _environments_drush_setup();
  }
}
