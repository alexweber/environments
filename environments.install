<?php

/**
 * @file
 * Installation hooks.
 */

/**
 * Implements hook_uninstall().
 */
function environments_uninstall() {
	// Delete our variables.
	variable_del('environments_env');
	variable_del('environments_css');
	variable_del('environments_js');
}

/**
 * Implements hook_enable().
 */
function environments_enable() {
	// Display a message and link to the configuration page if we're doing this
	// through the UI.
	if (php_sapi_name() !== 'cli') {
		drupal_set_message(t('You\'ve enabled the Environments module. Click <a href="!url">here</a> to configure up your site environments and tasks.', array('!url' => url('admin/config/development/environments', array('absolute' => TRUE)))), 'status', FALSE);
	}
}

/**
 * Implements hook_schema().
 */
function environments_schema() {
	$schema = array();

	$schema['environments'] = array(
		'description' => 'Site Environments.',
		'export' => array(
			'key' => 'name',
			'identifier' => 'environment',
			'default hook' => 'environments_default_environments',
			'api' => array(
				'owner' => 'environments',
				'api' => 'environments',
				'minimum_version' => 1,
				'current_version' => 1,
			),
		),
		'fields' => array(
			'name' => array(
				'description' => 'The environment\'s machine-readable name.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
			),
			'admin_title' => array(
				'description' => 'The environment\'s human-readable title.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
			),
			'alias' => array(
				'description' => 'The environment\'s alias, to use with Drush.',
				'type' => 'char',
				// This isn't available here so hard-code it.
//				'length' => ENVIRONMENTS_ALIAS_MAXLENGTH,
				'length' => 12,
				'not null' => FALSE,
			),
			'settings' => array(
				'description' => 'The environment\'s extra settings.',
				'type' => 'blob',
				'size' => 'big',
				'serialize' => TRUE,
			),
			'tasks' => array(
				'description' => 'The environment\'s tasks.',
				'type' => 'blob',
				'size' => 'big',
				'serialize' => TRUE,
			),
		),
		'primary key' => array('name'),
		'unique keys' => array(
			'alias' => array('alias'),
		),
	);

	$schema['environments_bundles'] = array(
		'description' => 'Environment Task Bundles.',
		'export' => array(
			'key' => 'name',
			'identifier' => 'bundle',
			'default hook' => 'environments_default_bundles',
			'api' => array(
				'owner' => 'environments',
				'api' => 'bundles',
				'minimum_version' => 1,
				'current_version' => 1,
			),
		),
		'fields' => array(
			'name' => array(
				'description' => 'The bundle\'s machine-readable name.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
			),
			'description' => array(
				'description' => 'The bundle\'s description.',
				'type' => 'text',
				'size' => 'big',
			),
			'tasks' => array(
				'description' => 'The bundle\'s tasks.',
				'type' => 'blob',
				'size' => 'big',
				'serialize' => TRUE,
			),
		),
		'primary key' => array('name'),
	);

	return $schema;
}

/**
 * Implements hook_requirements().
 */
function environments_requirements($phase) {
	$return = array();

	if ($phase === 'runtime') {
		if ($env = variable_get('environments_env')) {
			if ($environment = environments_load($env)) {
				$return['environments'] = array(
					'title' => t('Environments: current environment'),
					'value' => $environment->admin_title,
					'severity' => REQUIREMENT_INFO,
				);
			}
			else {
				$return['environments'] = array(
					'title' => t('Environments: invalid environment'),
					'value' => $env,
					'severity' => REQUIREMENT_ERROR,
				);
			}
		}
		else {
			$return['environments'] = array(
				'title' => t('Environments: current environment'),
				'value' => t('No environment set'),
				'severity' => REQUIREMENT_WARNING,
			);
		}
	}

	return $return;
}
