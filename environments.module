<?php

/**
 * @file
 * Environments module.
 */

/**
 * Environment alias max length, used in a few places.
 */
define('ENVIRONMENTS_ALIAS_MAXLENGTH', 12);

/**
 * Implements hook_permission().
 */
function environments_permission() {
	return array(
		'administer environments' => array(
			'title' => t('Administer Site Environments'),
			'description' => t('Administer the Environments module.'),
			'restrict access' => TRUE,
		),
		'view environments notifications' => array(
			'title' => t('View Environments notifications'),
			'description' => t('View notifications about what the current environment is.'),
		),
	);
}

/**
 * Implements hook_menu().
 */
function environments_menu() {
	$items = array();

	$items['admin/config/system/environments'] = array(
		'title' => 'Site environment',
		'description' => 'Manage the current site environment.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('environments_form_site'),
		'access arguments' => array('administer environments'),
		'file' => 'environments.admin.inc',
	);

	$items['admin/config/system/environments/confirm/%'] = array(
		'title' => 'Confirm site environment change',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('environments_form_site_confirm', 5),
		'access arguments' => array('administer environments'),
		'file' => 'environments.admin.inc',
	);

	return $items;
}

/**
 * Implements hook_menu_alter().
 */
function environments_menu_alter(&$items) {
	if (isset($items['admin/config/development/environments/list'])) {
		$items['admin/config/development/environments/list']['title'] = t('Environments');
	}
}

/**
 * Implements hook_help().
 */
function environments_help($path, $arg) {
	switch ($path) {
		case 'admin/help#environments':
			$path = drupal_get_path('module', 'environments');
			return file_get_contents("{$path}/README.txt");
		case 'admin/config/system/environments':
			return t('Here you can view and change the current environment, as well as manage other settings. To manage defined environments, go <a href="!url">here</a>.', array('!url' => url('admin/config/development/environments', array('absolute' => TRUE))));
		case 'admin/config/development/environments':
			return t('Here you can manage your environments and tasks. To change the current environment or manage other settings, go <a href="!url">here</a>.', array('!url' => url('admin/config/system/environments', array('absolute' => TRUE))));
		case 'admin/config/development/environments/list/%/tasks':
			return t('Here you can add to and manage all of an environment\'s tasks. <strong>NOTE</strong>: The order in which tasks appear is the exact order in which they will run. Use the handles on the left of each one to drag them around and re-order them and then press the "Update Order" button to save the changes.');
	}
}

/**
 * Implements hook_form_alter().
 *
 * Alter the CTools Export UI form for our exportables to make them look more
 * like other Drupal forms.
 */
function environments_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
	$plugins = array(
		'environments',
		'environments_bundles',
	);

	if (in_array($form_state['plugin']['name'], $plugins)) {
		$form['actions']= array(
			'#type' => 'actions',
		);

		foreach (element_children($form['buttons']) as $button) {
			$form['actions'][$button] = $form['buttons'][$button];
			unset($form['buttons'][$button]);
		}

		unset($form['buttons']);
	}
}

/**
 * Helper function to add tasks to the batch.
 *
 * @param mixed
 *   Either an environment object or a task bundle object.
 * @param array
 *   The array of operations to add to the batch.
 *
 * @see environments_set()
 */
function _environments_process_tasks($object, &$operations) {
	if (is_array($object->tasks)) {
		// Add tasks in order. We use a dispatcher function to allow operation
		// callbacks to live anywhere and not have to worry about specifying the
		// file right now.
		foreach (element_children($object->tasks, TRUE) as $task) {
			$task_info = $object->tasks[$task];
			$operations[] = array(
				'_environments_task_dispatcher',
				array($task_info)
			);
		}
	}
}

/**
 * Set the current environment.
 *
 * @param string
 *   An environment machine_name.
 */
function environments_set($env) {
	if ($environment = environments_load($env)) {
		$operations = array();

		// Process our tasks.
		_environments_process_tasks($environment, $operations);

		// Always run our cleanup operation last to set the context for status
		// messages and then flush caches for the grand finale.
		$operations[] = array(
			'_environments_task_cleanup',
			array(t('Cleaning up.'), $env)
		);

		// Setup batch.
		$batch = array(
			'title' => t('Setting up environment.'),
			'operations' => $operations,
			'finished' => '_environments_task_finished',
			'init_message' => t('Preparing to set environment.'),
			'progress_message' => t('Processed @current out of @total tasks.'),
			'error_message' => t('Error setting environent.'),
			'file' => drupal_get_path('module', 'environments') . '/environments.batch.inc',
		);

		batch_set($batch);
		_environments_process_batch($batch, 'admin/config/system/environments');
	}
	else {
		drupal_set_message(t('Trying to set invalid environment: %name', array('%name' => $env)), 'error', FALSE);
		watchdog('environments', 'Trying to set invalid environment: %name', array('%name' => $env), WATCHDOG_ERROR);
	}
}

/**
 * Helper function to process batch jobs.
 *
 * @param array
 *   The batch definition.
 * @param string
 *   The url to redirect to once batch is finished.
 */
function _environments_process_batch($batch, $redirect = NULL) {
	// If running through CLI, process batch using Drush.
	if (php_sapi_name() === 'cli' && function_exists('drush_backend_batch_process')) {
		$batch =& batch_get();
		$batch['progressive'] = FALSE;
		drush_backend_batch_process();
	}
	else {
		batch_process($redirect);
	}
}

/**
 * Unset the current environment.
 */
function environments_unset() {
	variable_set('environments_env', '');
	watchdog('environments', 'Environment unset.', array(), WATCHDOG_INFO);
}

/**
 * Implements hook_page_build().
 */
function environments_page_build(&$page) {
	if ($env = variable_get('environments_env')) {
		if ($environment = environments_load($env)) {
			// Check if we want to notify in this environment.
			if ($environment->settings['notify']) {
				// Check whether user has access to view notifications. This is done so
				// late because it's the most expensive check we do, so we try to avoid
				// it whenver possible.
				if (user_access('view environments notifications')) {
					$path = drupal_get_path('module', 'environments');

					$page['page_top']['environments'] = array(
						'#theme' => 'environments_banner',
						'#environment' => $env,
					);

					// Include default styles.
					if (variable_get('environments_css', TRUE)) {
						$page['page_top']['environments']['#attached']['css'][] = $path . '/assets/css/environments.css';
					}

					// Include default scripts.
					if (variable_get('environments_js', TRUE)) {
						$page['page_top']['environments']['#attached']['js'][] = $path . '/assets/js/environments.js';
					}
				}
			}
		}
	}
}

/**
 * Implements hook_theme().
 */
function environments_theme() {
	return array(
		'environments_banner' => array(
			'template' => 'templates/banner',
			'file' => 'environments.theme.inc',
			'variables' => array(
				'environment' => '',
			),
		),
		'environments_task_form' => array(
			'render element' => 'form',
			'file' => 'environments.theme.inc',
		)
	);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function environments_ctools_plugin_directory($module, $type) {
	if ($type === 'export_ui') {
		return 'plugins/export_ui';
	}
	else if ($type === 'environments_task') {
		return 'plugins/environments_task';
	}
}

/**
 * Implements hook_ctools_plugin_type().
 */
function environments_ctools_plugin_type() {
	$plugins['environments_task'] = array(
		'cache' => TRUE,
		'defaults' => array(
			// Administrative title.
			'admin_title' => '',
			// Callback to execute.
			'task_callback' => '',
			// An array of task-specific settings.
			'settings' => array(),
			// Settings form callback.
			'settings_callback' => '',
		),
		'use hooks' => FALSE,
	);

	return $plugins;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function environments_ctools_plugin_api($module, $api) {
	if ($module === 'environments' && $api === 'environments_task') {
		return array('version' => 1);
	}
}

/**
 * Fetch data on a single environment task.
 *
 * @param string $task
 *   Name of a task.
 *
 * @return array
 */
function environments_get_task($task) {
	ctools_include('plugins');
	return ctools_get_plugins('environments', 'environments_task', $task);
}

/**
 * Fetch data on all environment tasks.
 *
 * @return array
 */
function environments_get_tasks() {
	ctools_include('plugins');
	return ctools_get_plugins('environments', 'environments_task');
}

/**
 * Create a new environment object.
 *
 * Note that this function does not save the environment to the database.
 *
 * @see environments_form_edit()
 * @see environments_save()
 */
function environments_create($values = array()) {
	ctools_include('export');
	$environment = ctools_export_crud_new('environments');

	// Default name.
	if (isset($values['name'])) {
		$environment->name = $values['name'];
	}

	// Default title.
	if (isset($values['admin_title'])) {
		$environment->admin_title = $values['admin_title'];
	}

	// Default alias.
	if (isset($values['alias'])) {
		$environment->alias = $values['alias'];
	}

	// Default settings.
	$environment->settings = array(
		'notify' => TRUE,
	);

	if (isset($values['setings']) and is_array($values['settings'])) {
		$environment->settings = array_merge($environment->settings, $values['settings']);
	}

	// Default tasks.
	$environment->tasks = array();

	if (isset($values['tasks']) and is_array($values['tasks'])) {
		$environment->tasks = array_merge($values['tasks'], $environment->tasks);
	}

	return $environment;
}

/**
 * Fetches all environments from the database and returns them as an
 * associative array.
 */
function environments_load_all() {
	ctools_include('export');
	return ctools_export_crud_load_all('environments');
}

/**
 * Load a given environment.
 *
 * @param string
 *   The environment's name.
 *
 * @return stdClass|NULL
 *   The fully-loaded environment object or NULL if it couldn't be loaded.
 */
function environments_load($environment_name) {
	ctools_include('export');
	return ctools_export_crud_load('environments', $environment_name);
}

/**
 * Checks whether an environment with the given name already exists.
 *
 * @param string
 *   The environment's name.
 * @return boolean
 *   TRUE if there exists an environment with the give name, FALSE otherwise.
 */
function environments_exists($environment_name) {
	ctools_include('export');
	$environment = ctools_export_crud_load('environments', $environment_name);
	return isset($environment->name);
}

/**
 * Saves the given environment to the database.
 *
 * @param object
 *   The environment to save.
 *
 * @return object|boolean
 *   Failure to write a record will return FALSE. Otherwise SAVED_NEW or
 *   SAVED_UPDATED is returned depending on the operation performed. The
 *   $object parameter contains values for any serial fields defined.
 */
function environments_save(&$environment) {
	ctools_include('export');
	return ctools_export_crud_save('environments', $environment);
}

/**
 * Deletes the given environment from the database.
 *
 * @param object
 *   The environment object to delete.
 */
function environments_delete($environment) {
	ctools_include('export');
	return ctools_export_crud_delete('environments', $environment);
}

/**
 * Element validation callback; validates submitted variable name and cleans up
 * selection mode variable.
 *
 * @see environments_task_variable_set_settings()
 * @see environments_task_variable_del_settings()
 */
function _environments_task_variable_validate_name($element, &$form_state, $form) {
	$name = $form_state['values']['settings']['name'];
	if (!preg_match('/^[a-z]+[a-z0-9\_]*$/', $name)) {
		form_error($element, t('Invalid variable name.'));
	}

	// Remove helper settings if we're submitting the form.
	if ($form_state['submitted']) {
		unset($form_state['values']['settings']['selection']);
	}
}

/**
 * Element validation callback; type-casts the submitted value.
 *
 * @see environments_task_variable_set_settings()
 */
function _environments_task_variable_set_validate_value($element, &$form_state, $form) {
	$value_type = $form_state['values']['settings']['value_type'];
	$original_value = $value = $form_state['values']['settings']['value'];

	switch ($value_type) {
		case 'boolean':
			$value = (bool) $value;
			break;
		case 'integer':
			$value = (int) $value;
			break;
		case 'float':
			$value = (float) $value;
			break;
	}

	// Update value if we casted it.
	if ($original_value !== $value) {
		form_set_value($element, $value, $form_state);
	}

	// Remove helper settings if we're submitting the form.
	if ($form_state['submitted']) {
		unset($form_state['values']['settings']['getvalue']);
	}
}
